package com.member;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class MemberDAO implements MemberDAOInterface {
    private DataSource ds;

    public MemberDAO() {
        try {
            Context ctx = new InitialContext();
            ds = (DataSource) ctx.lookup("java:comp/env/jdbc/Oracle11g");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<MemberDTO> getAllMembers() {
        List<MemberDTO> dtos = new ArrayList<MemberDTO>();

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = ds.getConnection();
            String query = "SELECT * FROM MEMBER";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();

            while (rs.next()) {
                String name = rs.getString("NAME");
                String id = rs.getString("ID");
                String password = rs.getString("PASSWORD");
                String phone = rs.getString("PHONE");
                String email = rs.getString("EMAIL");
                String memberStatus = rs.getString("MEMBERSTATUS");
                String memberRole = rs.getString("MEMBERROLE");

                MemberDTO dto = new MemberDTO(name, id, password, phone, email, memberStatus, memberRole);
                dtos.add(dto);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return dtos;
    }

    @Override
    public MemberDTO getMemberById(String id) {
        MemberDTO member = null;

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = ds.getConnection();
            String query = "SELECT * FROM MEMBER WHERE ID = ?";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, id);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                String name = rs.getString("NAME");
                String password = rs.getString("PASSWORD");
                String phone = rs.getString("PHONE");
                String email = rs.getString("EMAIL");
                String memberStatus = rs.getString("MEMBERSTATUS");
                String memberRole = rs.getString("MEMBERROLE");

                member = new MemberDTO(name, id, password, phone, email, memberStatus, memberRole);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return member;
    }

    @Override
    public void addMember(MemberDTO member) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = ds.getConnection();
            String query = "INSERT INTO MEMBER(NAME, ID, PASSWORD, PHONE, EMAIL, MEMBERSTATUS, MEMBERROLE) VALUES (?, ?, ?, ?, ?, ?, ?)";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, member.getName());
            pstmt.setString(2, member.getId());
            pstmt.setString(3, member.getPassword());
            pstmt.setString(4, member.getPhone());
            pstmt.setString(5, member.getEmail());
            pstmt.setString(6, member.getMemberStatus());
            pstmt.setString(7, member.getMemberRole());
            pstmt.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void updateMember(MemberDTO member) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = ds.getConnection();
            String query = "UPDATE MEMBER SET NAME=?, PASSWORD=?, PHONE=?, EMAIL=?, MEMBERSTATUS=?, MEMBERROLE=? WHERE ID=?";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, member.getName());
            pstmt.setString(2, member.getPassword());
            pstmt.setString(3, member.getPhone());
            pstmt.setString(4, member.getEmail());
            pstmt.setString(5, member.getMemberStatus());
            pstmt.setString(6, member.getMemberRole());
            pstmt.setString(7, member.getId());
            pstmt.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void deleteMember(String id) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = ds.getConnection();
            String query = "DELETE FROM MEMBER WHERE ID=?";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, id);
            pstmt.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void approveMembership(String id) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = ds.getConnection();
            String query = "UPDATE MEMBER SET MEMBERSTATUS = '정상' WHERE ID = ?";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, id);
            pstmt.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    @Override
    public List<MemberDTO> getJoinRequests() {
        List<MemberDTO> joinRequests = new ArrayList<>();

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = ds.getConnection();
            String query = "SELECT * FROM MEMBER WHERE MEMBERSTATUS = '승인 전'";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();

            while (rs.next()) {
                String name = rs.getString("NAME");
                String memberId = rs.getString("ID");
                String password = rs.getString("PASSWORD");
                String phone = rs.getString("PHONE");
                String email = rs.getString("EMAIL");
                String memberStatus = rs.getString("MEMBERSTATUS");
                String memberRole = rs.getString("MEMBERROLE");

                MemberDTO dto = new MemberDTO(name, memberId, password, phone, email, memberStatus, memberRole);
                joinRequests.add(dto);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return joinRequests;
    }
    @Override
    public List<MemberDTO> getWithdrawalRequests() {
        List<MemberDTO> withdrawalRequests = new ArrayList<>();

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = ds.getConnection();
            String query = "SELECT * FROM MEMBER WHERE MEMBERSTATUS = '일시정지'";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();

            while (rs.next()) {
                String name = rs.getString("NAME");
                String memberId = rs.getString("ID");
                String password = rs.getString("PASSWORD");
                String phone = rs.getString("PHONE");
                String email = rs.getString("EMAIL");
                String memberStatus = rs.getString("MEMBERSTATUS");
                String memberRole = rs.getString("MEMBERROLE");

                MemberDTO dto = new MemberDTO(name, memberId, password, phone, email, memberStatus, memberRole);
                withdrawalRequests.add(dto);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return withdrawalRequests;
    }
    
 // MemberDAO.java

    @Override
    public List<MemberDTO> searchMembers(String keyword, String searchBy) {
        List<MemberDTO> memberList = new ArrayList<>();

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = ds.getConnection();
            String query = "SELECT * FROM MEMBER WHERE NAME LIKE ? OR ID LIKE ?";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, "%" + keyword + "%");
            pstmt.setString(2, "%" + keyword + "%");
            rs = pstmt.executeQuery();

            while (rs.next()) {
                String name = rs.getString("NAME");
                String id = rs.getString("ID");
                String password = rs.getString("PASSWORD");
                String phone = rs.getString("PHONE");
                String email = rs.getString("EMAIL");
                String memberStatus = rs.getString("MEMBERSTATUS");
                String memberRole = rs.getString("MEMBERROLE");

                MemberDTO dto = new MemberDTO(name, id, password, phone, email, memberStatus, memberRole);
                memberList.add(dto);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return memberList;
    }

    

}
    
